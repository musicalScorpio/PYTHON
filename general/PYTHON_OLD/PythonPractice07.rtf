{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fnil\fcharset134 HiraginoSansGB-W3;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;\red55\green146\blue55;\red67\green91\blue103;
\red29\green38\blue42;\red245\green247\blue249;\red25\green25\blue25;\red255\green255\blue255;\red55\green146\blue55;
\red67\green91\blue103;\red29\green38\blue42;\red245\green247\blue249;\red98\green98\blue98;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs32 \cf2 \expnd0\expndtw0\kerning0
383.\uc0\u160 Ransom Note\
\pard\pardeftab720\sl400

\b0\fs26 \cf3 \expnd0\expndtw0\kerning0
Easy\
\pard\pardeftab720\sl340

\fs24 \cf4 \expnd0\expndtw0\kerning0
1593290Add to ListShare\
\pard\pardeftab720\sa280

\fs28 \cf5 \expnd0\expndtw0\kerning0
Given two strings\uc0\u160 
\f1\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
ransomNote
\f0\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
\uc0\u160 and\u160 
\f1\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
magazine
\f0\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
, return\uc0\u160 
\f1\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
true
\f0\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
\uc0\u160 if\u160 
\f1\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
ransomNote
\f0\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
\uc0\u160 can be constructed from\u160 
\f1\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
magazine
\f0\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
\uc0\u160 and\u160 
\f1\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
false
\f0\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
\uc0\u160 otherwise.\
Each letter in\uc0\u160 
\f1\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
magazine
\f0\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
\uc0\u160 can only be used once in\u160 
\f1\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
ransomNote
\f0\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
.\
\uc0\u160 \
\pard\pardeftab720\sa280

\b \cf5 \expnd0\expndtw0\kerning0
Example 1:
\b0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f2\b\fs26 \cf5 \cb6 \expnd0\expndtw0\kerning0
Input:
\f3\b0 \expnd0\expndtw0\kerning0
 ransomNote = "a", magazine = "b"\

\f2\b \expnd0\expndtw0\kerning0
Output:
\f3\b0 \expnd0\expndtw0\kerning0
 false\
\pard\pardeftab720\sa280

\f0\b\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
Example 2:
\b0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f2\b\fs26 \cf5 \cb6 \expnd0\expndtw0\kerning0
Input:
\f3\b0 \expnd0\expndtw0\kerning0
 ransomNote = "aa", magazine = "ab"\

\f2\b \expnd0\expndtw0\kerning0
Output:
\f3\b0 \expnd0\expndtw0\kerning0
 false\
\pard\pardeftab720\sa280

\f0\b\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
Example 3:
\b0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl400

\f2\b\fs26 \cf5 \cb6 \expnd0\expndtw0\kerning0
Input:
\f3\b0 \expnd0\expndtw0\kerning0
 ransomNote = "aa", magazine = "aab"\

\f2\b \expnd0\expndtw0\kerning0
Output:
\f3\b0 \expnd0\expndtw0\kerning0
 true\
\pard\pardeftab720\sa280

\f0\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
\uc0\u160 \
\pard\pardeftab720\sa280

\b \cf5 \expnd0\expndtw0\kerning0
Constraints:
\b0 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0
\f1\fs26 \cf4 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
1 <= ransomNote.length, magazine.length <= 10
\fs20 \expnd0\expndtw0\kerning0
5
\f0\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
\
\ls1\ilvl0
\f1\fs26 \cf4 \cb6 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
ransomNote
\f0\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
\uc0\u160 and\u160 
\f1\fs26 \cf4 \cb6 \expnd0\expndtw0\kerning0
magazine
\f0\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
\uc0\u160 consist of lowercase English letters.\
\pard\pardeftab720\sl400

\fs26 \cf0 \expnd0\expndtw0\kerning0
\
Soln\'a1\'ad\
class Solution(object):\
    def canConstruct(self, ransomNote, magazine):\
        firstLetter = ransomNote[0]\
        if firstLetter not in magazine:\
            return False\
        else:\
            map =\{\}\
            for n in magazine:\
                n = str(n)\
                if not map.get(n):\
                    map[n] = 1\
                else:\
                    map[n] = int(map.get(n)) +1\
            count = 0\
            for ransom in ransomNote:\
                if map.get(ransom) is None:\
                    return False\
                else:\
                    if (map.get(ransom) -1) < 0:\
                        return False\
                    else:\
                        map [ransom] = map.get(ransom) -1\
                count+=1\
        \
        if len(ransomNote) == count:\
            return True\
        else:\
            return False\
\
\
\
\pard\pardeftab720

\b\fs32 \cf7 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 387.\uc0\u160 First Unique Character in a String\cb1 \
\pard\pardeftab720\sl400

\b0\fs26 \cf9 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 Easy\cb1 \
\pard\pardeftab720\sl340

\fs24 \cf10 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 4737190Add to ListShare\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sa280

\fs28 \cf11 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 Given a string\uc0\u160 
\f1\fs26 \cf10 \cb12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 s
\f0\fs28 \cf11 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 ,\uc0\u160 find the first non-repeating character in it and return its index. If it does not exist, return\u160 
\f1\fs26 \cf10 \cb12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 -1
\f0\fs28 \cf11 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 .\cb1 \
\cb8 \uc0\u160 \cb1 \
\pard\pardeftab720\sa280

\b \cf11 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Example 1:
\b0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl400

\f2\b\fs26 \cf11 \cb12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Input:
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  s = "leetcode"\

\f2\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Output:
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  0\
\pard\pardeftab720\sa280

\f0\b\fs28 \cf11 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Example 2:
\b0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl400

\f2\b\fs26 \cf11 \cb12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Input:
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  s = "loveleetcode"\

\f2\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Output:
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  2\
\pard\pardeftab720\sa280

\f0\b\fs28 \cf11 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Example 3:
\b0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl400

\f2\b\fs26 \cf11 \cb12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Input:
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  s = "aabb"\

\f2\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Output:
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  -1\
\pard\pardeftab720\sa280

\f0\fs28 \cf11 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u160 \cb1 \
\pard\pardeftab720\sa280

\b \cf11 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Constraints:
\b0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0
\f1\fs26 \cf10 \cb12 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 1 <= s.length <= 10
\fs20 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 5
\f0\fs28 \cf11 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 \
\ls2\ilvl0
\f1\fs26 \cf10 \cb12 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 s
\f0\fs28 \cf11 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 \uc0\u160 consists of only lowercase English letters.\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl400

\fs26 \cf13 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec13 Accepted\cb1 \
\pard\pardeftab720\sl400
\cf11 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 1M\cb1 \
\pard\pardeftab720\sl400
\cf13 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec13 Submissions\cb1 \
\pard\pardeftab720\sl400
\cf11 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 1.8M\cb1 \
class Solution(object):\
    def firstUniqChar(self, s):\
        map = \{\}\
        for n in s:\
            if map.get(n) is not None:\
                map[n] = int (map.get(n)) +1\
            else:\
                print (str(n))\
                map[str(n)] = 1\
        print (map)\
                \
        count =0    \
        for n in s:\
            if map.get(n) == 1 :\
                return count\
            count =count +1\
\
        return -1}