{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \
\
print ('####### FIBONACCHI #######')\
\
def fibo (count):\
    if(count ==0 or count == 1):\
        return 1\
    else:\
        return fibo (count -1) + fibo(count -2)\
        \
print (fibo(5))\
\
for i in range(5):\
    print ('Fib of '+str (i) + ' is '+ str(fibo(i)))\
\
assert False\
#Print even number from 1 -100\
for n in range (2,100,2):\
    print (n)\
def sum(a, b):\
    return (a + b)\
\
\
\
#Tuple Example\
\
tuple_example = (1,2,3,4)\
print (tuple_example[3])\
print (tuple_example)\
print (tuple_example[-2])\
\
#Find all the divisors of a number\
divisors=()\
x=24\
for i in range(1,x):\
    if x%i==0:\
        divisors =divisors+(i,)\
print (divisors)\
print (divisors [1:3])\
\
#=================\
\
#Lists\
people =['Sam','Nikki']\
\
print (people)\
people[1] ='Maa'\
print (people)\
people.append('Sammy')\
people.sort()\
print (people)\
\
#=================\
\
#Dictionary\
map_example = \{'1-1':"One", 2:"Two"\}\
print (map_example['1-1'])\
#print (map_example[1])\
\
for c in map_example.keys():\
    print("######")\
    print(c)\
    print("######")\
\
for c in map_example.values():\
    print("######")\
    print(c)\
    print("######")\
 \
print ('Hello World!')\
\
#Do a translation\
\
map_of_words = \{'sam':'mas', 'nikki':'ikkin' , 'is':'si' ,'awesome':'emosrwa'\}\
\
def translatedWord (word):\
    print('calling method for-> ' +word)\
    if word in map_of_words:\
        return map_of_words[word]\
    else:\
        return word\
\
def translateSentence (sentence):\
    word =""\
    translatedSentenceVar =""\
    sentence = sentence \
    for c in sentence:\
        if c !=' ':\
            word = word +c\
        else:\
            translatedSentenceVar = translatedSentenceVar + ' ' + translatedWord(word) \
            word =""\
    return translatedSentenceVar[1:] + ' '+translatedWord(word)\
\
print (translateSentence('nikki is awesome'))\
\
##Recursion\
#Calculate b to the power of nikki\
\
def calculatePower( num, power):\
    if power == 0:\
        return 1 \
    else :\
        num = num * calculatePower(num,power -1)\
        return num\
print ('Calculating power ' + str(calculatePower (2,3)))\
    \
def towerOfHahoi (numberOfDisks, fr, to, spare):\
    if numberOfDisks ==1:\
        print ( ' from '+str(fr) + ' to '+str(to))\
    else:\
        towerOfHahoi(numberOfDisks-1,'fr','sp','to')\
        towerOfHahoi(1,'fr','to','sp')\
        towerOfHahoi(numberOfDisks-1,'sp','to','fr')\
    \
print ('Hanoi ' + str(towerOfHahoi (2,'From','To','Spare')))\
\
\
#Find palindrone in a word in a nice way\
\
def isPali(word):\
    if (len(word)<=0):\
        return True;\
    else:\
        print (word)\
        return word[0] == word[-1] and isPali(word[1:-1])\
\
#print (isPali ("SONhOS"))\
\
\
#Find palindrone in a word\
\
def isPalidrome (word, position1, position2):\
    i=position1\
    j=position2\
    print (f'COMPARING = \{word[i]\} and j= \{word[j]\}')\
\
    if (word[i] != word[j]):\
        print (f'i = \{word[i]\} and j= \{word[j]\}')\
        assert False\
    else :\
        if(i != j):\
            print (f'i = \{i\} and j= \{j\}')\
            isPalidrome(word,i+1,j-1)\
        else:\
            return True\
\
pallindrome = 'soos'\
#print (isPalidrome(pallindrome,0,len(pallindrome)-1))\
\
\
\
\
#Implement binary search\
sorted_array_as_input = input('Enter a sorted list')\
search_string= int(input('Enter search string'))\
\
sorted_array = list (sorted_array_as_input)\
print (len(sorted_array))\
upper =len(sorted_array)-1\
lower = 0\
middle= 0\
while (lower<upper):\
    if search_string == sorted_array[middle]:\
        print (f'Found It !!\{search_string\}')\
        break;\
    middle = int((lower+upper)/2)\
    if int(search_string) < int(sorted_array[middle]) :\
        print ("middle",middle )\
        upper=middle-1\
    elif int(search_string) > int(sorted_array[middle]):\
        print ("middle",middle )\
        lower =middle+1\
    else:\
        print (f'Found It !!\{search_string\}')\
        break;\
\
#print ('#######################')\
\
\
\
a = int(input('Enter 1st number: '))\
b = int(input('Enter 2nd number: '))\
\
\
print(f'Sum of \{a\} and \{b\} is \{sum(a, b)\}')\
\
def withEpsilon(a, b, epsilon):\
    assert type (a) ==int\
    return abs(a - b)<=epsilon\
print (withEpsilon(a, b,1))\
\
def sumFoDigits (string01):\
    sum01 =0\
    for c in str(string01):\
        sum01 +=  int(c)\
    print (sum01)\
    #Slicing (Slices from 1 to y-1)\
    print (f'Slicing : \{str(string01)[0:2]\}')\
    #Will find the posiiton of the match\
    print (f'Finding : \{str(string01).find("9")\}')\
\
sumFoDigits(a)\
\
\
\
\
\
\
}